// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
const DEBUG = true;
const PREFIX = '3dviewer::';

function log(msg, level='info', force=false){
	if(!DEBUG && !force){
		return;
	}
	
	let fn = console[level];
	if(fn){
		fn(`${PREFIX}${msg}`)
	}
}

async function getViewer(viewerName){
	let viewer = await mx.viewer3D.getViewerByName(viewerName);
	if(viewer){
		return viewer;
	}else{
		log(`Viewer ${viewerName} was not present!`, 'error');
	}
};

// clearServerCache
const url = '/visualization/tc/cache/clear';
const clearServerCache = async ()=>{
	await fetch(url, {
		method: 'POST',
		headers:{
			"x-csrf-token": mx.session.getConfig("csrftoken")
		}
	}).catch((error)=>{
		console.log(error);
	});
}
// 

// END EXTRA CODE

/**
 * @param {string} viewerName - the viewerName
 * @param {string} operations - json string
 * @returns {Promise.<boolean>}
 */
export async function InteractWithViewer(viewerName, operations) {
	// BEGIN USER CODE
	let viewer = await getViewer(viewerName);
	let pvwViewer = viewer?.pvwViewer;
	if(!viewer){
		return;
	}

	// operations is an array
	const ops = JSON.parse( operations );
	ops.forEach(item => {
		const {action, value} = item;
		if(action === 'markup_restore'){
			const markupManager = pvwViewer.markup;
			markupManager.showMarkupViewByJSON( value );
			markupManager.mode = PLMVisWeb.MarkupMode.Select
		}else if(action === 'mouse_highlight'){
			pvwViewer.setMouseHighlightEnabled(value);
		}else if(action === 'clear_cache'){
			const loader = pvwViewer.getLoader();
			if(value === 'client'){
				loader?.clearLocalData();
			}else if(value === 'server'){
				clearServerCache();
			}else{
				// clear all
				loader?.clearLocalData();
				clearServerCache();
			}
		}else if(action === 'apply_points'){
			const sgoManager = viewer._sgoManager;
			viewer.clearSGO("Sphere");

			const mockPoints = [
				[9.1430, 0.0000, 2.9084],
				[9.1432, -0.3143, 3.1187],
				[9.1432, 0.3143, 3.1187],
				[10.1026, 0.0000, 3.1672],
				[7.5553, 0.0000, 2.8605],
				[4.5802, -0.2264, 2.4845],
				[4.5802, 0.2264, 2.4845],
				[2.5523, 0.1599, 3.2159],
				[2.5121, 0.1572, 3.3557],
				[2.6328, 0.1557, 3.1704],
				[2.5121, 0.1668, 3.1215],
				[7.5553, 0.0000, 2.8605],
				[2.0099, 0.5825, 2.8085],
				[1.3283, 0.3931, 2.7664],
				[0.9973, -0.2497, 2.8282],
				[2.0102, 0.6015, 2.8516],
				[1.4956, 0.4180, 2.8382],
				[1.4287, 0.4121, 2.8383],
				[1.8101, 0.3601, 2.6137],
				[1.9935, 0.3919, 2.5959],
				[9.4406, 1.2591, 3.9455],
				[9.4406, -1.2426, 3.9619],
				[9.4406, -1.2755, 3.9291],
				[5.1478, -2.8625, 2.7142],
				[4.6642, -3.0158, 2.7429],
				[5.2898, -1.2089, 2.6630],
				[6.1927, -0.4411, 2.4913],
				[5.1061, -5.5261, 3.2958],
				[5.1749, -5.3447, 2.9946],
				[5.3580, -2.9662, 2.8026],
				[5.7236, -3.2770, 2.7657],
				[5.3256, -1.7171, 2.2486],
				[5.6013, -3.7827, 2.8400],
				[5.4387, -2.9740, 2.7045],
				[5.1478, 2.8625, 2.7142],
				[4.6642, 3.0158, 2.7429],
				[5.2898, 1.2089, 2.6630],
				[6.1927, 0.4411, 2.4913],
				[5.1061, 5.5261, 3.2958],
				[5.1749, 5.3447, 2.9946],
				[5.3580, 2.9662, 2.8026],
				[5.7236, 3.2770, 2.7657],
				[5.3256, 1.7171, 2.2486],
				[5.6013, 3.7827, 2.8400],
				[5.4387, 2.9740, 2.7045],
			];

			mockPoints.forEach((point)=>{
				// model unit in inch, hence need the conversion
				let m2inch = 39.3700787;
				let p = point.map((x)=>x*m2inch);

				let sphere = new SGOSphere(p, 1.8, 0xff0000);
				sgoManager.addSGO(sphere);
			});
		}else{
			// 
		}
	});
	
	
	return true;
	// END USER CODE
}
