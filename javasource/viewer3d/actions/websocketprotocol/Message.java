// automatically generated by the FlatBuffers compiler, do not modify

package viewer3d.actions.websocketprotocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Message extends Table {
  public static Message getRootAsMessage(ByteBuffer _bb) { return getRootAsMessage(_bb, new Message()); }
  public static Message getRootAsMessage(ByteBuffer _bb, Message obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : -1; }
  public byte messageFlags() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte messageType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte contentType() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte responseType() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int correlationId() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : -1; }
  public int streamId() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : -1; }
  public String action() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer actionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  public MessageContent content() { return content(new MessageContent()); }
  public MessageContent content(MessageContent obj) { int o = __offset(20); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createMessage(FlatBufferBuilder builder,
      int id,
      byte message_flags,
      byte message_type,
      byte content_type,
      byte response_type,
      int correlation_id,
      int stream_id,
      int actionOffset,
      int contentOffset) {
    builder.startObject(9);
    Message.addContent(builder, contentOffset);
    Message.addAction(builder, actionOffset);
    Message.addStreamId(builder, stream_id);
    Message.addCorrelationId(builder, correlation_id);
    Message.addId(builder, id);
    Message.addResponseType(builder, response_type);
    Message.addContentType(builder, content_type);
    Message.addMessageType(builder, message_type);
    Message.addMessageFlags(builder, message_flags);
    return Message.endMessage(builder);
  }

  public static void startMessage(FlatBufferBuilder builder) { builder.startObject(9); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(0, id, -1); }
  public static void addMessageFlags(FlatBufferBuilder builder, byte messageFlags) { builder.addByte(1, messageFlags, 0); }
  public static void addMessageType(FlatBufferBuilder builder, byte messageType) { builder.addByte(2, messageType, 0); }
  public static void addContentType(FlatBufferBuilder builder, byte contentType) { builder.addByte(3, contentType, 0); }
  public static void addResponseType(FlatBufferBuilder builder, byte responseType) { builder.addByte(4, responseType, 0); }
  public static void addCorrelationId(FlatBufferBuilder builder, int correlationId) { builder.addInt(5, correlationId, -1); }
  public static void addStreamId(FlatBufferBuilder builder, int streamId) { builder.addInt(6, streamId, -1); }
  public static void addAction(FlatBufferBuilder builder, int actionOffset) { builder.addOffset(7, actionOffset, 0); }
  public static void addContent(FlatBufferBuilder builder, int contentOffset) { builder.addOffset(8, contentOffset, 0); }
  public static int endMessage(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

