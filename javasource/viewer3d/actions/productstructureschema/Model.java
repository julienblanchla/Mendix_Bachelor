// automatically generated by the FlatBuffers compiler, do not modify

package viewer3d.actions.productstructureschema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Model extends Table {
  public static Model getRootAsModel(ByteBuffer _bb) { return getRootAsModel(_bb, new Model()); }
  public static Model getRootAsModel(ByteBuffer _bb, Model obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Model __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String source() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public Part root() { return root(new Part()); }
  public Part root(Part obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Property properties(int j) { return properties(new Property(), j); }
  public Property properties(Property obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createModel(FlatBufferBuilder builder,
      int sourceOffset,
      int rootOffset,
      int propertiesOffset) {
    builder.startObject(3);
    Model.addProperties(builder, propertiesOffset);
    Model.addRoot(builder, rootOffset);
    Model.addSource(builder, sourceOffset);
    return Model.endModel(builder);
  }

  public static void startModel(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(0, sourceOffset, 0); }
  public static void addRoot(FlatBufferBuilder builder, int rootOffset) { builder.addOffset(1, rootOffset, 0); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(2, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endModel(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishModelBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedModelBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

