// automatically generated by the FlatBuffers compiler, do not modify

package viewer3d.actions.productstructureschema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Part extends Table {
  public static Part getRootAsPart(ByteBuffer _bb) { return getRootAsPart(_bb, new Part()); }
  public static Part getRootAsPart(ByteBuffer _bb, Part obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Part __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public Instance children(int j) { return children(new Instance(), j); }
  public Instance children(Instance obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int childrenLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public String modelRef() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modelRefAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer modelRefInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public Property properties(int j) { return properties(new Property(), j); }
  public Property properties(Property obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createPart(FlatBufferBuilder builder,
      int nameOffset,
      int childrenOffset,
      int modelRefOffset,
      int propertiesOffset) {
    builder.startObject(4);
    Part.addProperties(builder, propertiesOffset);
    Part.addModelRef(builder, modelRefOffset);
    Part.addChildren(builder, childrenOffset);
    Part.addName(builder, nameOffset);
    return Part.endPart(builder);
  }

  public static void startPart(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addChildren(FlatBufferBuilder builder, int childrenOffset) { builder.addOffset(1, childrenOffset, 0); }
  public static int createChildrenVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startChildrenVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addModelRef(FlatBufferBuilder builder, int modelRefOffset) { builder.addOffset(2, modelRefOffset, 0); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(3, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPart(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

