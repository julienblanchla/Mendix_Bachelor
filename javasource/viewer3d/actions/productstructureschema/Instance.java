// automatically generated by the FlatBuffers compiler, do not modify

package viewer3d.actions.productstructureschema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Instance extends Table {
  public static Instance getRootAsInstance(ByteBuffer _bb) { return getRootAsInstance(_bb, new Instance()); }
  public static Instance getRootAsInstance(ByteBuffer _bb, Instance obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Instance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Part part() { return part(new Part()); }
  public Part part(Part obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public double matrix(int j) { int o = __offset(6); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int matrixLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer matrixAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer matrixInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  public Property properties(int j) { return properties(new Property(), j); }
  public Property properties(Property obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createInstance(FlatBufferBuilder builder,
      int partOffset,
      int matrixOffset,
      int propertiesOffset) {
    builder.startObject(3);
    Instance.addProperties(builder, propertiesOffset);
    Instance.addMatrix(builder, matrixOffset);
    Instance.addPart(builder, partOffset);
    return Instance.endInstance(builder);
  }

  public static void startInstance(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addPart(FlatBufferBuilder builder, int partOffset) { builder.addOffset(0, partOffset, 0); }
  public static void addMatrix(FlatBufferBuilder builder, int matrixOffset) { builder.addOffset(1, matrixOffset, 0); }
  public static int createMatrixVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startMatrixVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(2, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endInstance(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

